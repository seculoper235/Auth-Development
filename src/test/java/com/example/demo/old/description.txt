** 우리가 쓰는 것은 TDD가 아닌 BDD이다! **
* 흔히 우리는 Given - When - Then의 방식으로 테스트 코드를 작성한다.이를 보고 TDD로 개발했다고 하겠지만,사실 이건 TDD가 아니라 BDD이다.


** TDD란? **
* TDD는 엄밀히 말해, 코드를 작성하기 전에 먼저 테스트 코드를 작성하고 통과하면 그때야 코드를 사용하는 것이다.
*
* 요구 사항에 맞게 테스트 코드를 작성하고, 이를 통과할 수 있는 실제 코드를 작성한다.
* 그리고 이 코드를 다시 실 사용할 수 있도록 다듬는 리팩토링 작업을 거친다.
*
* 글로만 보면 테스트를 먼저 거치니 완벽한 코드를 작성할 수 있겠으나, 실상은 쉽지 않다.
* TDD는 반드시 테스트 코드가 먼저 선행되어야 한다. 즉, 코드 한줄을 쓰더라도 먼저 테스트를 진행해야 한다는 것이다.
* 그렇다보니, 테스트를 진행하는 코드의 단위가 굉장히 좁아지고, 심하면 작성한 사람 외에는 알아보기 힘든 코드가 탄생하게 될 수도 있다.
* 또한 어떤 테스트 케이스를 어떻게 작성해야 할지 등 러닝 커브도 매우 놓다.
* 즉 테스트 코드라면 누구나 알아보기 쉽고 사용할 수 있어야 하는데, 그런 범용성이 떨어지는 것이다!


** BDD란? **
* 그에 반해 BDD는 행위 기반의 개발로, 코드를 먼저 작성하고 테스트를 거치게 된다. 즉, "코드의 완벽함이 아닌 검증의 용도로 사용하는 것"이다!
*
* 따라서 먼저 요구 사항에 맞게 실 코드를 작성하고, 검증을 위한 테스트 코드를 작성한다.
* 테스트를 통과하지 못했다면 리팩토링 작업을 거치고, 완벽히 통과할 때까지 다시 테스트를 진행한다.
*
* 이러한 개발 방법은 이미 작성된 코드의 검증이 주 목적이므로, 원하는 상황을 부여하고 테스트를 진행할 필요가 있다.
* 이때 사용되는 것이 바로 Given - When - Then 이다!
* Given에서 원하는 테스트 상황을 부여하고,
* When에서 코드를 실행하며,
* Then에서 그 결과값을 검증한다.
*
* 이런 확실하게 나누어진 단계는 상황을 부여하는 "시나리오를 기반"으로 하므로, 누가봐도 알아보기 쉽고 사용할 수 있다.
* 검증할 만한 시나리오가 없다면 굳이 모든 메소드마다 작성할 필요는 없을 뿐더러, 러닝 커브도 비교적 낮다.
* 하지만 BDD는 지원하는 SW도 적고, "선행동-후조치 방식"의 코드는 아무래도 TDD보다 완전한 코드를 만들어 낼 수는 없다.


** 결론! **
* 즉, 코드의 입장에서 보자면 TDD가 효율적이고 좋은 개발 방법이나,
* 실제로 협업하며 개발을 해야하는 상황에선 BDD가 효율적인 방법이라고 생각한다.

